package org.vitrivr.cineast.core.features.abstracts;

import java.util.List;

import org.vitrivr.cineast.core.config.Config;
import org.vitrivr.cineast.core.config.QueryConfig;
import org.vitrivr.cineast.core.data.ReadableFloatVector;
import org.vitrivr.cineast.core.data.StringDoublePair;
import org.vitrivr.cineast.core.db.PersistencyWriter;
import org.vitrivr.cineast.core.db.PersistencyWriterSupplier;
import org.vitrivr.cineast.core.db.PersistentTuple;
import org.vitrivr.cineast.core.features.extractor.Extractor;
import org.vitrivr.cineast.core.util.MathHelper;

public abstract class SubDivMotionHistogram extends MotionHistogramCalculator implements Extractor {

protected PersistencyWriter phandler;
	
	protected SubDivMotionHistogram(String tableName, String fieldName, double maxDist){
		super(tableName, fieldName, (float)maxDist);
	}

	@Override
	public void init(PersistencyWriterSupplier supply) {
		this.phandler = supply.get();
		this.phandler.open(this.tableName);
		this.phandler.setFieldNames("id", "hist", "sums");
	}
	
	protected void persist(String shotId, ReadableFloatVector fs1, ReadableFloatVector fs2) {
		PersistentTuple tuple = this.phandler.generateTuple(shotId, fs1, fs2); //FIXME currently only one vector is supported
		this.phandler.persist(tuple);
	}
	
	/**
	 * helper function to retrieve elements close to a vector which has to be generated by the feature module
	 */
	protected List<StringDoublePair> getSimilar(float[] vector, QueryConfig qc) {
		List<StringDoublePair> distances = this.selector.getNearestNeighbours(Config.getRetrieverConfig().getMaxResultsPerModule(), vector, "hist", qc);
		for(StringDoublePair sdp : distances){
			double dist = sdp.value;
			sdp.value = MathHelper.getScore(dist, maxDist);
		}
		return distances;
	}
	
	
	
	@Override
	public void finish() {
		if(this.phandler != null){
			this.phandler.close();
		}
		super.finish();
	}
}
